// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package usersrepo is a generated GoMock package.
package usersrepo

import (
	usersreqdto "authenticationService/dto/request/auth"
	usersrespdto "authenticationService/dto/response/auth"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// AssignRoleToUser mocks base method.
func (m *MockIRepository) AssignRoleToUser(ctx context.Context, userID, roleID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToUser", ctx, userID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToUser indicates an expected call of AssignRoleToUser.
func (mr *MockIRepositoryMockRecorder) AssignRoleToUser(ctx, userID, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToUser", reflect.TypeOf((*MockIRepository)(nil).AssignRoleToUser), ctx, userID, roleID)
}

// CreateUser mocks base method.
func (m *MockIRepository) CreateUser(ctx context.Context, payload *usersreqdto.CreateUserRequest) (*usersrespdto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, payload)
	ret0, _ := ret[0].(*usersrespdto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIRepositoryMockRecorder) CreateUser(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIRepository)(nil).CreateUser), ctx, payload)
}

// CreateUserSession mocks base method.
func (m *MockIRepository) CreateUserSession(ctx context.Context, payload *usersrespdto.Session) (*usersrespdto.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSession", ctx, payload)
	ret0, _ := ret[0].(*usersrespdto.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserSession indicates an expected call of CreateUserSession.
func (mr *MockIRepositoryMockRecorder) CreateUserSession(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSession", reflect.TypeOf((*MockIRepository)(nil).CreateUserSession), ctx, payload)
}

// DeleteUserSession mocks base method.
func (m *MockIRepository) DeleteUserSession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSession indicates an expected call of DeleteUserSession.
func (mr *MockIRepositoryMockRecorder) DeleteUserSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSession", reflect.TypeOf((*MockIRepository)(nil).DeleteUserSession), ctx, sessionID)
}

// GetUserByEmail mocks base method.
func (m *MockIRepository) GetUserByEmail(ctx context.Context, userEmail string) (*usersrespdto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, userEmail)
	ret0, _ := ret[0].(*usersrespdto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIRepositoryMockRecorder) GetUserByEmail(ctx, userEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIRepository)(nil).GetUserByEmail), ctx, userEmail)
}

// RevokeUserSession mocks base method.
func (m *MockIRepository) RevokeUserSession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeUserSession indicates an expected call of RevokeUserSession.
func (mr *MockIRepositoryMockRecorder) RevokeUserSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserSession", reflect.TypeOf((*MockIRepository)(nil).RevokeUserSession), ctx, sessionID)
}
